name: Construction et test de la bibliothèque de gestion des utilitaires

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '0 0 15 * *'

env:
  BRANCHE_GIT: ${{ github.head_ref || github.ref_name }}
  CARGO_TERM_COLOR: always
  CARGO_HOME:  /tmp/cache/cargo
  RUSTUP_HOME: /tmp/cache/.rustup
jobs:
  construire:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: read
      attestations: write
    steps:
      - uses: actions/checkout@v4
      - name: Rechercher si le répertoire rustup est en mémoire temporaire
        id: rustup
        uses: actions/cache@v4
        with:
          path: ${{ env.RUSTUP_HOME }}
          key: ${{ runner.os }}-rustup-amd64-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rustup-amd64
      - name: Rechercher si le répertoire des dépendances est en mémoire temporaire
        id: cargo
        uses: actions/cache@v4
        with:
          path: ${{ env.CARGO_HOME }}
          key: ${{ runner.os }}-cargo-amd64-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-amd64
      - name: Rechercher si le répertoire de construction est en mémoire temporaire
        id: target
        uses: actions/cache@v4
        with:
          path: ./target
          key: ${{ runner.os }}-target-amd64-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-amd64
      - name: Installer rustup
        if: steps.rustup.outputs.cache-hit != 'true'
        run: |
          wget -O - https://sh.rustup.rs | sh -s -- -y
      - name: Construire l'application
        run:  |
          rustup --version
          cargo --version
          cargo build --release --example afficher_jour --example determiner_localisation
      - name: Auditer les dépendances
        run: |
          cargo audit
      - name: Signer les exécutables
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            ./target/release/examples/afficher_jour
            ./target/release/examples/determiner_localisation
      - uses: actions/upload-artifact@v4
        with:
          name: exemples_utilitaire_peripherique_amd64
          path: |
            ./target/release/examples/afficher_jour
            ./target/release/examples/determiner_localisation
          retention-days: 1
          if-no-files-found: error
  construire-armv6:
      runs-on: ubuntu-latest
      timeout-minutes: 10
      # if: github.ref == 'refs/heads/master'
      env:
        COMPILATEUR_CROISE: cross-gcc-12.2.0-pi_0-1.tar.gz
        ADRESSE_COMPILATEUR_CROISE: https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Bookworm/GCC%2012.2.0/Raspberry%20Pi%201%2C%20Zero/cross-gcc-12.2.0-pi_0-1.tar.gz/download -O cross-gcc-12.2.0-pi_0-1.tar.gz
      permissions:
        id-token: write
        contents: read
        attestations: write
      steps:
        - uses: actions/checkout@v4
        - name: Rechercher si le compilateur croisé pour Raspberry Pi Zero est en mémoire temporaire
          id: compilateur-croise
          uses: actions/cache@v4
          with:
            path: ./${{ env.COMPILATEUR_CROISE }}
            key: ${{ runner.os }}-${{ hashFiles(env.COMPILATEUR_CROISE) }}-${{ env.COMPILATEUR_CROISE }}
        - name: Télécharger le compilateur croisé pour Raspberry Pi Zero
          if: steps.compilateur-croise.outputs.cache-hit != 'true'
          run: |
            wget $ADRESSE_COMPILATEUR_CROISE
            git clone https://github.com/abhiTronix/raspberry-pi-cross-compilers.git
        - name: Préparer le compilateur pour la compilation croisée ARMv6
          run: |
            sudo apt-get install gcc-arm-linux-gnueabihf wget libssl-dev pkg-config make perl
            tar -xf $COMPILATEUR_CROISE
            mv .cargo/config-compilation-croisee .cargo/config
        - name: Rechercher si le répertoire rustup est en mémoire temporaire
          id: rustup
          uses: actions/cache@v4
          with:
            path: ${{ env.RUSTUP_HOME }}
            key: ${{ runner.os }}-rustup-armv6-${{ hashFiles('Cargo.lock') }}
            restore-keys: |
              ${{ runner.os }}-rustup-armv6
        - name: Rechercher si le répertoire des dépendances est en mémoire temporaire
          id: cargo
          uses: actions/cache@v4
          with:
            path: ${{ env.CARGO_HOME }}
            key: ${{ runner.os }}-cargo-armv6-${{ hashFiles('Cargo.lock') }}
            restore-keys: |
              ${{ runner.os }}-cargo-armv6
        - name: Rechercher si le répertoire de construction est en mémoire temporaire
          id: target
          uses: actions/cache@v4
          with:
            path: ./target
            key: ${{ runner.os }}-target-armv6-${{ hashFiles('Cargo.lock') }}
            restore-keys: |
              ${{ runner.os }}-target-armv6
        - name: Installer rustup
          if: steps.rustup.outputs.cache-hit != 'true'
          run: |
            wget -O - https://sh.rustup.rs | sh -s -- -y
            rustup target add arm-unknown-linux-gnueabihf
        - name: Construire l'application
          run:  |
            rustup --version
            cargo --version
            cargo build --release --target arm-unknown-linux-gnueabihf --example afficher_jour_rusttype --example determiner_localisation
        - name: Auditer les dépendances
          run: |
            cargo audit  
        - uses: actions/upload-artifact@v4
          with:
            name: exemples_utilitaire_peripherique_armv6
            path: |
              ./target/arm-unknown-linux-gnueabihf/release/examples/afficher_jour_rusttype
              ./target/arm-unknown-linux-gnueabihf/release/examples/determiner_localisation
            retention-days: 1
            if-no-files-found: error
